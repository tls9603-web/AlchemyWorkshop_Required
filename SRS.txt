##  필수 기능 가이드

기존 연금술 공방 관리 시스템에 **검색 기능을 추가**해주세요.

- **물약 이름**으로 검색이 가능해야 합니다.
- **재료**로 검색이 가능해야 합니다. 특정 재료가 포함된 모든 레시피를 찾을 수 있어야 합니다.
- 물약 이름이 동일한 경우는 없다고 가정합니다.

필수 기능 구현 완료 후 `AlchemyWorkshop` 클래스에 검색 관련 메서드가 추가된 전체적인 구조를 그리면 아래와 같습니다.


## 도전 기능 가이드

단순히 레시피를 아는 것을 넘어, 직접 물약을 조합하여 재고를 만들고 관리하는 도전 기능입니다. 이 기능을 통해 연금술 공방 운영의 깊이를 더할 수 있습니다.

- 레시피가 공방에 추가될 때, 해당 물약은 **자동으로 3개의 초기 재고**를 가집니다. (별도의 '조합' 과정 없음)
- **지급 및 반환:**
    - 특정 물약의 **현재 재고 수량**을 알 수 있어야 합니다.
    - **물약 이름**으로 재고를 검색하고, 재고가 1개 이상인 경우 모험가에게 지급할 수 있습니다.
    - **레시피의 재료**로 관련 물약들의 재고를 검색하고, 재고가 1개 이상인 경우 지급할 수 있어야 합니다.
    - 모험가에게 지급했던 물약의 공병을 다시 반환 받을 수 있어야 합니다.
- 모든 물약의 최대 재고는 **3개로 고정**되며, 반환 시 3개를 초과할 수 없습니다.

도전 기능이 추가된 `AlchemyWorkshop` 클래스의 구조는 다음과 같습니다.

##  평가 기준 

필수	- 물약 이름으로 검색 시 정확한 결과가 반환되는지 확인
- 재료로 검색 시 결과가 올바르게 표시되는지 확인
필수	- 코드의 가독성, 함수 분리 여부, 중복 코드 최소화 여부
- 검색 기능에서 입력 검증 처리와 에러 처리 여부
필수	- 객체지향적 설계 원칙(클래스와 메서드 활용)을 잘 이해했는지
- 검색 기능의 논리적 흐름과 데이터 접근 방식이 적절한지
도전	- 객체지향적 설계와 책임 분리의 원칙을 준수했는지 (RecipeManager, StockManager)
- 재고 관리와 지급/반환 로직이 논리적으로 일관성 있는지
도전	- 물약 재고를 정확히 조회할 수 있는지 확인
- 물약 지급 시 재고가 올바르게 감소되는지 확인
- 반환 기능이 재고를 정상적으로 복구하는지 확인
도전	- 지급 및 반환 기능에서 에러 처리 및 사용자 친화적 메시지 출력 여부
- 재고 관리를 효율적으로 구현했는지(중복 코드 최소화)
- 프로그램 확장성을 고려했는지(예: 다른 재고 정책 추가 가능성)